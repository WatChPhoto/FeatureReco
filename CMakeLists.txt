cmake_minimum_required(VERSION 3.0)#2.8.12)
project( UndistortImage )
find_package( OpenCV REQUIRED )
include_directories( ${OpenCV_INCLUDE_DIRS} )
add_executable( UndistortImage UndistortImage.cpp )
target_link_libraries( UndistortImage ${OpenCV_LIBS} )
set(CMAKE_MACOSX_RPATH 1)

project( FindBoltLocations )
find_package( OpenCV REQUIRED )
find_package( ROOT 6.14 CONFIG REQUIRED)
#include("${ROOT_DIR}/modules/RootNewMacros.cmake")
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE Release)
endif()
set(CMAKE_CXX_FLAGS "-Wall -Wextra -std=c++11 -g")
set(CMAKE_CXX_FLAGS_DEBUG "-g")
set(CMAKE_CXX_FLAGS_RELEASE "-O2")

ROOT_GENERATE_DICTIONARY(G__FeatureTreeLib FeatureTTree.hpp LINKDEF Linkdef.h)

ADD_LIBRARY( featurereco_lib openblobdetector.cpp Configuration.cpp MedianTextReader.cpp featureFunctions.cpp bwlabel.cpp PMTIdentified.cpp ellipse.cpp hough_ellipse.cpp ellipse_detection_2.1.cpp distance_to_ellipse.cpp distance_to_ellipse_test.cpp ellipse_intersection.cpp)
ADD_LIBRARY( FeatureTreeLib SHARED FeatureTTree.cpp G__FeatureTreeLib.cxx)
add_dependencies(FeatureTreeLib G__FeatureTreeLib)
include_directories( ${OpenCV_INCLUDE_DIRS} ${ROOT_INCLUDE_DIRS})
add_executable( FindBoltLocations FindBoltLocations.cpp )
target_link_libraries( FindBoltLocations featurereco_lib FeatureTreeLib ${OpenCV_LIBS} ${ROOT_LIBS} ROOT::Core ROOT::Hist ROOT::Graf ROOT::Tree)


project( analyse_merged_ttree )
ADD_LIBRARY( imagedatareaderlib ImageDataReader.cpp )
add_executable( analyse_merged_ttree analyse_merged_ttree.cpp )
include_directories( ${ROOT_INCLUDE_DIRS})
target_link_libraries( analyse_merged_ttree imagedatareaderlib FeatureTreeLib ${ROOT_LIBS} ROOT::Core ROOT::Hist ROOT::Graf ROOT::Tree)

#project( distance_to_ellipse_test )
#find_package( OpenCV REQUIRED )
#ADD_LIBRARY( testlib ellipse_detection_2.1.cpp distance_to_ellipse.cpp distance_to_ellipse_test.cpp)
#include_directories( ${OpenCV_INCLUDE_DIRS} )
#add_executable( distance_to_ellipse_test distance_to_ellipse_test.cpp )
#target_link_libraries( distance_to_ellipse_test testlib ${OpenCV_LIBS} )

#project( test_ellipse_intersect )
#find_package( OpenCV REQUIRED )
#ADD_LIBRARY( intersect_lib ellipse.cpp ellipse_intersection.cpp)
#include_directories( ${OpenCV_INCLUDE_DIRS} )
#add_executable( test_ellipse_intersect test_ellipse_intersect.cpp )
#target_link_libraries( test_ellipse_intersect intersect_lib ${OpenCV_LIBS} )

#project( automate )
#find_package( OpenCV REQUIRED )
#ADD_LIBRARY( automate_lib Configuration.cpp)
#include_directories( ${OpenCV_INCLUDE_DIRS} )
#add_executable( automate automate.cpp )
#target_link_libraries( automate automate_lib ${OpenCV_LIBS} )


project( distance )
find_package( OpenCV REQUIRED )
find_package( ROOT 6.14 CONFIG REQUIRED)
ADD_LIBRARY( distancetestlib ImageDataReader.cpp distancelib.hpp )
include_directories( ${OpenCV_INCLUDE_DIRS} ${ROOT_INCLUDE_DIRS})
add_executable( distancetest distancetest.cpp )
target_link_libraries( distancetest distancetestlib ${OpenCV_LIBS} ${ROOT_LIBS} ROOT::Core ROOT::Hist ROOT::Graf ROOT::Tree)

project( visualize )
find_package( OpenCV REQUIRED )
include_directories( ${OpenCV_INCLUDE_DIRS})
add_executable( visualize visualize.cpp )
ADD_LIBRARY( cameralib camera.cpp camera.hpp )
target_link_libraries( visualize cameralib distancetestlib ${OpenCV_LIBS})


project( minimization )
find_package( OpenCV REQUIRED )
find_package( ROOT 6.14 CONFIG REQUIRED)
#ADD_LIBRARY( distancetestlib ImageDataReader.cpp distancelib.hpp )
include_directories( ${OpenCV_INCLUDE_DIRS} ${ROOT_INCLUDE_DIRS})
add_executable( minimization minimization.cpp)
target_link_libraries( minimization distancetestlib ${OpenCV_LIBS} ${ROOT_LIBS} ROOT::Core ROOT::Hist ROOT::Graf ROOT::Tree)
